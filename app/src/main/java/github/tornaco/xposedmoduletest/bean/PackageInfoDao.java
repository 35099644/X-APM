package github.tornaco.xposedmoduletest.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PACKAGE_INFO".
 */
public class PackageInfoDao extends AbstractDao<PackageInfo, Integer> {

    public static final String TABLENAME = "PACKAGE_INFO";

    /**
     * Properties of entity PackageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "ID");
        public final static Property PkgName = new Property(1, String.class, "pkgName", false, "PKG_NAME");
        public final static Property AppName = new Property(2, String.class, "appName", false, "APP_NAME");
        public final static Property AddAt = new Property(3, Long.class, "addAt", false, "ADD_AT");
        public final static Property Guard = new Property(4, Boolean.class, "guard", false, "GUARD");
        public final static Property Flags = new Property(5, Byte.class, "flags", false, "FLAGS");
    }

    ;


    public PackageInfoDao(DaoConfig config) {
        super(config);
    }

    public PackageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"PACKAGE_INFO\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PKG_NAME\" TEXT," + // 1: pkgName
                "\"APP_NAME\" TEXT," + // 2: appName
                "\"ADD_AT\" INTEGER," + // 3: addAt
                "\"GUARD\" INTEGER," + // 4: guard
                "\"FLAGS\" INTEGER);"); // 5: flags
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PACKAGE_INFO\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, PackageInfo entity) {
        stmt.clearBindings();

        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String pkgName = entity.getPkgName();
        if (pkgName != null) {
            stmt.bindString(2, pkgName);
        }

        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(3, appName);
        }

        Long addAt = entity.getAddAt();
        if (addAt != null) {
            stmt.bindLong(4, addAt);
        }

        Boolean guard = entity.getGuard();
        if (guard != null) {
            stmt.bindLong(5, guard ? 1L : 0L);
        }

        Byte flags = entity.getFlags();
        if (flags != null) {
            stmt.bindLong(6, flags);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public PackageInfo readEntity(Cursor cursor, int offset) {
        PackageInfo entity = new PackageInfo( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pkgName
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appName
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // addAt
                cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // guard
                cursor.isNull(offset + 5) ? null : (byte) cursor.getShort(offset + 5) // flags
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, PackageInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setPkgName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddAt(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setGuard(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setFlags(cursor.isNull(offset + 5) ? null : (byte) cursor.getShort(offset + 5));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Integer updateKeyAfterInsert(PackageInfo entity, long rowId) {
        return entity.getId();
    }

    /**
     * @inheritdoc
     */
    @Override
    public Integer getKey(PackageInfo entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
